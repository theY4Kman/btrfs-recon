"""Add ChunkItem flag fields to ChunkTree matview

Revision ID: def933329547
Revises: 9f06a495ffee
Create Date: 2022-03-25 03:09:59.216148-04:00

"""
from alembic import op
import sqlalchemy as sa
import btrfs_recon.persistence.fields


# revision identifiers, used by Alembic.
revision = 'def933329547'
down_revision = '9f06a495ffee'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_view('chunk_tree', materialized=True)
    op.create_view('chunk_tree', 'SELECT chunk_item.id, tree_node.generation, key."offset" AS log_start, key."offset" + chunk_item.length AS log_end, chunk_item.length, chunk_item.stripe_len, chunk_item.num_stripes, array_agg(ARRAY[stripe.devid, stripe."offset"] ORDER BY address.phys ASC) AS stripes, chunk_item."has_DATA_flag", chunk_item."has_SYSTEM_flag", chunk_item."has_METADATA_flag", chunk_item."has_RAID0_flag", chunk_item."has_RAID1_flag", chunk_item."has_DUP_flag", chunk_item."has_RAID10_flag", chunk_item."has_RAID5_flag", chunk_item."has_RAID6_flag", chunk_item."has_RAID1C3_flag", chunk_item."has_RAID1C4_flag" \nFROM leaf_item JOIN tree_node ON tree_node.id = leaf_item.parent_id JOIN key ON key.id = leaf_item.key_id JOIN chunk_item ON leaf_item.struct_type = \'ChunkItem\' AND chunk_item.id = leaf_item.struct_id JOIN stripe ON chunk_item.id = stripe.chunk_item_id JOIN address ON address.id = stripe.address_id GROUP BY chunk_item.id, tree_node.generation, key."offset", key."offset" + chunk_item.length, chunk_item.stripe_len, chunk_item.num_stripes ORDER BY log_start', materialized=True)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_view('chunk_tree', materialized=True)
    op.create_view('chunk_tree', ' SELECT chunk_item.id,\n    tree_node.generation,\n    key."offset" AS log_start,\n    (key."offset" + chunk_item.length) AS log_end,\n    chunk_item.stripe_len,\n    chunk_item.num_stripes,\n    array_agg(ARRAY[stripe.devid, stripe."offset"] ORDER BY address.phys) AS stripes\n   FROM (((((leaf_item\n     JOIN tree_node ON ((leaf_item.parent_id = tree_node.id)))\n     JOIN key ON ((leaf_item.key_id = key.id)))\n     JOIN chunk_item ON ((((leaf_item.struct_type)::text = \'ChunkItem\'::text) AND (leaf_item.struct_id = chunk_item.id))))\n     JOIN stripe ON ((chunk_item.id = stripe.chunk_item_id)))\n     JOIN address ON ((address.id = stripe.address_id)))\n  GROUP BY chunk_item.id, tree_node.generation, key."offset", (key."offset" + chunk_item.length), chunk_item.stripe_len, chunk_item.num_stripes\n  ORDER BY key."offset";', materialized=True)
    # ### end Alembic commands ###
